#!/usr/bin/env python
import argparse
import os
import re
import sh
import shlex
import sys
import tempfile

VAR_RE = re.compile(r'\${(?P<varname>.*)}')

parser = argparse.ArgumentParser()
parser.add_argument('--compose-file', default='docker-compose.yml')
parser.add_argument('--name', help='override the default, which is the name of the directory')
parser.add_argument('--cat', action='store_true', help='print the rendered compose file')

args = parser.parse_args()

stack_name = args.name
if not stack_name:
    stack_name = os.path.basename(os.getcwd())

# load up the environment
env_file = os.path.join(os.path.expanduser('~'), '.docker', 'environments', stack_name)
stack_env = {}
if os.path.exists(env_file):
    with open(env_file) as fh:
        for line in fh.read().splitlines():
            key, value = line.split('=')
            stack_env[key] = value
else:
    print(f'WARNING: env_file={env_file} file not found', file=sys.stderr)

os.environ.update(stack_env)

with open(args.compose_file) as fh:
    content = fh.read()

    previous_idx = 0
    rendered = ''
    for x in VAR_RE.finditer(content):
        rendered += content[previous_idx:x.start('varname')-2]  # -2 to get rid of variable's `${`

        varname = x.group('varname')
        try:
            rendered += os.environ[varname]
        except KeyError:
            sys.exit(f'varname={varname} not in environment')

        previous_idx = x.end('varname') + 1  # +1 to get rid of variable's `}`

    rendered += content[previous_idx:]

fh = tempfile.NamedTemporaryFile()
fh.write(rendered.encode('utf8'))

if args.cat:
    print(rendered)

command = f"""docker stack deploy
  --prune
  --with-registry-auth
  --compose-file {fh.name}
  {stack_name}"""
command_split = shlex.split(command)

executable = getattr(sh, command_split[0])
executable(*command_split[1:], _env=os.environ)

print(command)
